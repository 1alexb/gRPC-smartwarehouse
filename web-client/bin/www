#!/usr/bin/env node

const app = require('../app');
const http = require('http');
const socketIo = require('socket.io');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

// Attach Socket.IO
const io = socketIo(server);

// Handle connections
let userCounter = 1; // Shared counter

io.on('connection', (socket) => {
  const username = `User ${userCounter++}`;

  console.log(`${username} connected`);
  socket.emit('chat-message', { user: 'Server', message: `Welcome ${username}` });
  socket.emit('chat-message', { user: 'Server', message: `Type your message below to chat.` });

  socket.on('chat-message', (msg) => {
    console.log(`${username}: ${msg}`);
    io.emit('chat-message', { user: username, message: msg }); // send structured object
  });

  socket.on('disconnect', () => {
    console.log(`${username} disconnected`);
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES': console.error(bind + ' requires elevated privileges'); process.exit(1);
    case 'EADDRINUSE': console.error(bind + ' is already in use'); process.exit(1);
    default: throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Web GUI running at http://localhost:' + addr.port);
}
